{"ast":null,"code":"var _jsxFileName = \"/Users/leonardmelnik/Documents/stefaniesList/src/components/TasksHome.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Tasks from './Tasks';\nimport NewTask from './tasks/NewTask';\nimport LabelsList from './LabelsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchData();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //get Data\n\n  const fetchData = async () => {\n    const res = await fetch('http://localhost:8000');\n    const data = await res.json();\n    return data;\n  };\n\n  const sendTask = async task => {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(task)\n    };\n    const res = await fetch('http://localhost:8000');\n    const data = await res.json();\n    return data;\n  };\n\n  const getLabel = name => {\n    for (var i = 0; i < labels.length; i++) {\n      if (labels[i].name == name) {\n        return labels[i];\n        break;\n      }\n    }\n  };\n\n  const submitTask = () => {\n    if (document.getElementById('taskName').value) {\n      var newTask;\n\n      if (document.getElementById('taskLabel').value) {\n        //If there is a label\n        const labelName = document.getElementById('taskLabel').value; //newTask = {name: document.getElementById('taskName').value, tag : document.getElementById('taskLabel').value,backgroundColor : getLabel(labelName).backgroundColor, textColor : getLabel(labelName).textColor}\n\n        newTask = {\n          name: document.getElementById('taskName').value,\n          tag: document.getElementById('taskLabel').value,\n          backgroundColor: document.getElementById('taskBackgroundColor').value,\n          textColor: document.getElementById('taskTextColor').value\n        };\n      } else {\n        console.log(\"no label\");\n        newTask = {\n          name: document.getElementById('taskName').value,\n          tag: document.getElementById('taskLabel').value,\n          backgroundColor: document.getElementById('taskBackgroundColor').value,\n          textColor: document.getElementById('taskTextColor').value\n        };\n      }\n\n      setTasks([...tasks, newTask]);\n    }\n  };\n\n  const [labels, setLabels] = useState([]);\n  useEffect(() => {\n    const getLabel = async () => {\n      const labelsFromServer = await getLabelsServer();\n      setLabels(labelsFromServer);\n    };\n\n    getLabel();\n  }, []); //get Data\n\n  const getLabelsServer = async () => {\n    const res = await fetch('http://localhost:8000/sections');\n    const data = await res.json();\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      submitTask: submitTask,\n      labels: labels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"uZZvKaMnRITR1lxUnUu01fcoylc=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/leonardmelnik/Documents/stefaniesList/src/components/TasksHome.js"],"names":["useState","useEffect","Tasks","NewTask","LabelsList","Home","tasks","setTasks","values","setValues","getTasks","tasksFromServer","fetchData","res","fetch","data","json","sendTask","task","options","method","body","JSON","stringify","getLabel","name","i","labels","length","submitTask","document","getElementById","value","newTask","labelName","tag","backgroundColor","textColor","console","log","setLabels","labelsFromServer","getLabelsServer"],"mappings":"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","sourcesContent":["\nimport { useState, useEffect } from 'react'\nimport Tasks from './Tasks';\nimport NewTask from './tasks/NewTask';\nimport LabelsList from './LabelsList';\n\n\nconst Home = () => {\n    const [tasks, setTasks] = useState([])\n    const [values, setValues] = useState([])\n\n    useEffect(() =>{\n       const getTasks = async () => {\n           const tasksFromServer = await fetchData()\n           setTasks(tasksFromServer)\n       }\n        getTasks()\n    }, [])\n    //get Data\n    const fetchData = async () => {\n        const res = await fetch('http://localhost:8000')\n        const data = await res.json()\n        return data\n    }\n    const sendTask = async (task) => {\n      const options = {\n        method: 'POST',\n        body: JSON.stringify( task )  \n    \n    };\n      const res = await fetch('http://localhost:8000')\n      const data = await res.json()\n      return data\n    }\n    const getLabel = (name) => {\n        for(var i = 0;i<labels.length;i++){\n            if(labels[i].name == name){\n                return labels[i]\n                break\n            }\n\n        }\n      \n       }\n    const submitTask = () => {\n        if(document.getElementById('taskName').value ){\n            \n            var newTask\n            if(document.getElementById('taskLabel').value){\n                //If there is a label\n                const labelName = document.getElementById('taskLabel').value\n                //newTask = {name: document.getElementById('taskName').value, tag : document.getElementById('taskLabel').value,backgroundColor : getLabel(labelName).backgroundColor, textColor : getLabel(labelName).textColor}\n                newTask = {name: document.getElementById('taskName').value, tag : document.getElementById('taskLabel').value,backgroundColor : document.getElementById('taskBackgroundColor').value, textColor : document.getElementById('taskTextColor').value}\n\n                \n\n             \n            }else{\n                console.log(\"no label\")\n                newTask = {name: document.getElementById('taskName').value, tag : document.getElementById('taskLabel').value,backgroundColor : document.getElementById('taskBackgroundColor').value, textColor : document.getElementById('taskTextColor').value}\n\n              \n            }\n          setTasks([\n            ...tasks, newTask\n        ]\n        )\n        \n        }\n     \n      }\n      const [labels, setLabels] = useState([])\n\n      useEffect(() =>{\n         const getLabel = async () => {\n             const labelsFromServer = await getLabelsServer()\n             setLabels(labelsFromServer)\n         }\n          getLabel()\n      }, [])\n      //get Data\n      const getLabelsServer = async () => {\n          const res = await fetch('http://localhost:8000/sections')\n          const data = await res.json()\n          return data\n      }\n    return (\n        <div>\n            <NewTask submitTask = { submitTask } labels = { labels }>\n            </NewTask>\n            <Tasks tasks ={ tasks }></Tasks>\n            \n        </div>\n    )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}